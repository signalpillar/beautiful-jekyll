# -*- mode: org; -*-
#+TITLE: signalpillar
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="styles/bigblow/css/htmlize.css"/>
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="styles/bigblow/css/bigblow.css"/>
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="styles/bigblow/css/hideshow.css"/>

#+HTML_HEAD: <script type="text/javascript" src="styles/bigblow/js/jquery-1.11.0.min.js"></script>
#+HTML_HEAD: <script type="text/javascript" src="styles/bigblow/js/jquery-ui-1.10.2.min.js"></script>

#+HTML_HEAD: <script type="text/javascript" src="styles/bigblow/js/jquery.localscroll-min.js"></script>
#+HTML_HEAD: <script type="text/javascript" src="styles/bigblow/js/jquery.scrollTo-1.4.3.1-min.js"></script>
#+HTML_HEAD: <script type="text/javascript" src="styles/bigblow/js/jquery.zclip.min.js"></script>
#+HTML_HEAD: <script type="text/javascript" src="styles/bigblow/js/bigblow.js"></script>
#+HTML_HEAD: <script type="text/javascript" src="styles/bigblow/js/hideshow.js"></script>
#+HTML_HEAD: <script type="text/javascript" src="styles/lib/js/jquery.stickytableheaders.min.js"></script>
#+begin_export html
<!-- Global site tag (gtag.js) - Google Analytics -->
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-147976773-1"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'UA-147976773-1');
</script>
#+end_export
* Notes
**  mypy.ini                                                   :python:mypy:
The configuration that is not annoying and does the job.

#+BEGIN_SRC ini
	[mypy]
	warn_unused_ignores = True
	follow_imports = skip
	show_error_context = True
	warn_incomplete_stub = True
	ignore_missing_imports = True
	check_untyped_defs = True
	cache_dir = /dev/null
	# Cannot enable this one as we still allow defining functions without any types.
	# disallow_untyped_defs = True
	warn_redundant_casts = True
	warn_unused_configs = True
	strict_optional = True
#+END_SRC

**  tox & emacs                                                 :tox:python:

I am havy user of *tox*. Every new project has one and it is not only because I
can keep my dependencies and tools configuration in one place but also because I
have a nice integration with Emacs.

I press *f4* and select the test environment to use.

#+BEGIN_SRC elisp
  (global-set-key [f4] 'sp/tox/activate-current-project-tox-env)
#+END_SRC

Powerful combo of tox, projectile, and helm.

#+BEGIN_SRC elisp
(defun sp/tox/find-tox-dirs-in-project (project-root-dir)

  (defun -find-toxenv-bin-dirs (root)
    (projectile-files-via-ext-command
     root
     (format "find %s -type d -name 'bin' -path '*/.tox/*/bin' -print0" root)))

  (-map (lambda (file) (sp/path/parent-dir (sp/path/parent-dir file)))
        (-find-toxenv-bin-dirs project-root-dir)))

(defun sp/tox/activate-current-project-tox-env ()
  (interactive)
  (let* (
         (venv-dirs (sp/tox/find-tox-dirs-in-project (projectile-project-root)))
         (venv-dirs-length (length venv-dirs)))
    (progn
      (venv-set-location
       (if (> venv-dirs-length 1)
           (helm-comp-read "Choose tox directory to workon" venv-dirs)
         (if (= venv-dirs-length 0)
             (error "The project doesn't have created tox virtual environments.")
           (car venv-dirs))))
      (venv-workon)
      (add-to-list 'python-shell-extra-pythonpaths (projectile-project-root))
      (add-to-list 'python-shell-extra-pythonpaths (format "%s/src" (projectile-project-root)))
      )))
#+END_SRC

** Just another attempt
Another attempt to have a place to write short notes. In org-mode. Without tooling.

1. Update =index.org=
2. Export to HTML file. In spacemacs it is =,meehh=.
3. Push to github.

The theme for HTML page is [[https://github.com/fniessen/org-html-themes#bigblow][Bigblow]].
* Drafts
** My dream environment
Something from the list I have already and something is still in the plans.

OS: [[https://nixos.org/][NixOs]] to rule them all.

Editor: Emacs (Spacemacs bundle, evil)

HTTP: [[https://github.com/pashky/restclient.el][restclient.el]]

Shell: [[https://github.com/nushell/nushell][nushell]]

** Another tool on my tool belt                                     :python:
*** Dependency injection

[[https://pypi.org/project/injector/][injector]] is an underrated project. I can tell that because I haven't see a single
project in Python that uses it (except of one I am working on).
Works with the type hints and encourages good style in code writing:

- no globals
- testable code

I didn't quite determined best practices how to use injector for integration
tests in the application.

[[https://pypi.org/project/Flask-Injector/][flask-injector]] is a small extension to the injector library, that brings some
new dependencies from Flask world and =request= scope.

*** Load/Dump of structural data

*What do we want to do?*

- Describe hierarchical data using classes with attributes that have type hints.
  It can be =typing.NamedTuple=, =dataclasses.dataclass= or something else that has
  nice way of specifying the attributes and their types.
- Using the library create the instance of the described classes from JSON or
  just a regular mapping (=typing.Mapping=).
- Serialise instance to =dict= or JSON.
- Have a nice error reporting that helps in understanding where the data
  doesn't match some type.

*Why we need this*?

It is an easy way to declare configuration structure in the file, payload or
request params, validate them and serialise back if needed.

*Tools*

[[https://pypi.org/project/pydantic/][pydantic]] another data validation and settings management library that heavily
relies on type hints.

[[https://github.com/ltworf/typedload][typedload]] is an amazing library that helps load/dump dictionary to the data
class or =typing.NamedTuple= with minimal effort. Without any additional
attributes just using pure type annotations it understands how to map the fields.

[[https://pypi.org/project/attrs/][attrs]] + [[https://pypi.org/project/cattrs/][cattrs]] while attrs library is very popular it is a last choice for me. =cattrs=
at the moment I've tried it was the lib that didn't have a nice error type that
I could catch and be sure that is validation error. The library could raise
=ValueError=, for instance, and error wouldn't give me much information about the
place where it failed. Maybe I didn't know how to cook it properly or I don't
have a case for it.

* About

#+ATTR_HTML: :width 100%
| file:./imgs/retrobox.png | Co-founder of [[https://retrobox.signaldata.xyz/][Retrobox]], a Slack app for bias-free retrospectives |
| [[file:./imgs/twitter.png]]    | [[https://twitter.com/signalpillar][signalpillar]]                                                     |
