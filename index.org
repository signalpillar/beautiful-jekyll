#+OPTIONS: num:nil

* Just a collection of handy snippets and links that are easy to forget.
** Git
- [[https://chris.beams.io/posts/git-commit/][How to Write a Git Commit Message]]
** Changelog
- Convention https://keepachangelog.com/en/1.0.0/ ReST is preferrable.
** Python

*** Editor
#+BEGIN_EXAMPLE elisp
'(pytest-cmd-flags "-vv -x -s --doctest-modules")
#+END_EXAMPLE
*** Logging
Configuration logging in the code

#+BEGIN_SRC python

  def _init_logging(level):
      logging.config.dictConfig(dict(
          version=1,
          formatters={
              'f': {'format':
                    '%(asctime)s %(levelname)s %(message)s'}
          },
          handlers={
              'h': {'class': 'logging.StreamHandler',
                    'formatter': 'f',
                    'level': level}
          },
          root={
              'handlers': ['h'],
              'level': level,
          },
          loggers={
              'inimigrate': {
                  'handlers': [],
                  'level': level,
              },
              '__main__': {
                  'handlers': [],
                  'level': level,
              }
          }
      ))
#+END_SRC
*** Configuration

#+BEGIN_SRC python
import os
import re
from functools import partial

import yaml


ENV_VAR_MATCHER = re.compile(
    r"""
        \$\{       # match characters `${` literally
        ([^}:\s]+) # 1st group: matches any character except `}` or `:`
        :?         # matches the literal `:` character zero or one times
        ([^}]+)?   # 2nd group: matches any character except `}`
        \}         # match character `}` literally
    """, re.VERBOSE
)


IMPLICIT_ENV_VAR_MATCHER = re.compile(
    r"""
        .*          # matches any number of any characters
        \$\{.*\}    # matches any number of any characters
                    # between `${` and `}` literally
        .*          # matches any number of any characters
    """, re.VERBOSE
)


def _replace_env_var(match):
    env_var, default = match.groups()
    value = os.environ.get(env_var, None)
    if value is None:
        # expand default using other vars
        if default is None:
            # regex module return None instead of
            #  '' if engine didn't entered default capture group
            default = ''

        value = default
        while IMPLICIT_ENV_VAR_MATCHER.match(value):  # pragma: no cover
            value = ENV_VAR_MATCHER.sub(_replace_env_var, value)
    return value


def env_var_constructor(loader, node, raw=False):
    raw_value = loader.construct_scalar(node)
    value = ENV_VAR_MATCHER.sub(_replace_env_var, raw_value)
    return value if raw else yaml.safe_load(value)


def setup_yaml_parser():
    yaml.add_constructor('!env_var', env_var_constructor)
    yaml.add_constructor('!raw_env_var',
                         partial(env_var_constructor, raw=True))
    yaml.add_implicit_resolver('!env_var', IMPLICIT_ENV_VAR_MATCHER)
#+END_SRC
*** Requests Library

#+BEGIN_SRC python
    import http.client
    import logging
    http.client.HTTPConnection.debuglevel = 1

    logging.basicConfig()
    logging.getLogger().setLevel(logging.DEBUG)
    requests_log = logging.getLogger("requests.packages.urllib3")
    requests_log.setLevel(logging.DEBUG)
    requests_log.propagate = True
#+END_SRC
*** Testing
**** Coverage
It is possible to fix the lower bound for coverage.
#+BEGIN_EXAMPLE
# .coveragerc
[report]
fail_under = 90
#+END_EXAMPLE
